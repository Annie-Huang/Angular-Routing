https://github.com/Annie-Huang/Angular-Routing
https://github.com/DeborahK/Angular-Routing
http://blogs.msmvps.com/deborahk/angular-routing-problem-solver/


All the rounter path for this system:
http://localhost:4200/welcome


2. Introduction
#####################
D:\react\Angular-Routing>npm install


3. Routing Basics
#######################
Importing the Angular Router
- RouterModule.forRoot()
- Declares the router directives
- Manages our route configuration
- Registers the router service
- Used once for the application

@NgModule({
	imports: [
		BrowserModule,
		RouterModule.forRoot([])
	],
	declarations: [
		AppComponent
	],
	bootstrap: [AppComponent]
})
export classAppModule { }

RouterModule.forChild()
- Declares the router directives
- Manages our route configuration
- Does NOT register the router service
- Used in feature modules


This one will cause delay when serving the data.
	InMemoryWebApiModule.forRoot(ProductData, { delay: 1000 }),

-----

[
	{ path: 'welcome', component: WelcomeComponent },
	{ path: '', redirectTo: 'welcome', pathMatch: 'full'},
	{ path: '**', component: PageNotFoundComponent }
]
to
[
	{ path: 'home', component: WelcomeComponent },
	{ path: 'welcome', redirectTo: 'home', pathMatch: 'full' },
	{ path: '', redirectTo: 'home', pathMatch: 'full'},
	{ path: '**', component: PageNotFoundComponent }
]

A key point to keep in mind is that the order of the routes in this array matters. 
The router uses a first match wins strategy when matching route paths. 
This means that more specific paths should always be before less specific paths, such as the wildcard path. 

But there is one potential gotcha here. Redirects cannot be chained. The router will do one of these redirects, 
but not both, during one navigation. So if the default route is activated, the route is redirected to the welcome route. 

This imeans, you cannot use '' to redirectTo 'welcome' and then welcome redirectTo 'home'. the '' has to redirect to 'home'

Redirects can be local or absolute. Local redirects replace a single URL segment with a different one, such as our examples here. 
An absolute redirect replaces the entire URL.


 Any one outlet can only display one routed component's template at a time.


--------

Change www.mysite.com/APM/welcome (brower) to (server)
from APM/welcome
to APM/index.html
is through Requires Url rewriting. You can google how to do url rewriting in server side.

Using Hash-based Urls
RouterModule.forRoot([...],{ useHash: true })


Basics Checklist: Setting Up
Define the base path	<base href="/">
Import RouterModule
- Use RouterModule.forRoot() for app routes (one time only!)
- Use RouterModule.forChild() for features

Basics Checklist: Configuring Routes
path: Url segment(s) for the route
- No leading slash
- '' for default route; '**' for wildcard route
- Casing matters
component
- Not string name; not enclosed in quotes
- Component must be imported
Order matters!


4. Routing to Features
##############################
Importing the Angular Router without Service module through RouterModule.forChild([])
- Service
- Configuration
- Directives

Actually, behind the scenes, the routerLink directive calls router.navigate with a provided link parameters array 
so everything that we can pass to router.navigate we can assign to the routerLink directive, and vice versa.

Some parts of the current URL, such as secondary route information, is retained when navigating. 
If we don't want this behavior, there is another navigate method we can use, navigateByUrl.


@NgModule({
  imports: [
    BrowserModule,
    HttpClientModule,
    InMemoryWebApiModule.forRoot(ProductData, { delay: 1000 }),
    RouterModule.forRoot([
      { path: 'welcome', component: WelcomeComponent },
      { path: '', redirectTo: 'welcome', pathMatch: 'full' },
      { path: '**', component: PageNotFoundComponent }
    ]),
    ProductModule,
    UserModule,
    MessageModule
  ],

RouterModule.forRoot is processed after ProductModule | UserModule | MessageModule



@NgModule({
  imports: [
    BrowserModule,
    HttpClientModule,
    InMemoryWebApiModule.forRoot(ProductData, { delay: 1000 }),
    AppRoutingModule,	<-- Need to put in last.
    ProductModule,
    UserModule,
    MessageModule
  ]
Order:
	welcome
	''
	**
	products
	login
Now that our application routes are in an external module, the route paths are processed in the order they are specified here, 
so the wildcard path matches every path that is not the welcome or empty path, preventing navigation to any other path below it. 
We need to reorder our imports array to ensure that our wildcard route is last in the list of route paths.


Routing to Features Checklist: Configuration
Import RouterModule
- Be sure to use RouterModule.forChild()
Configure the routes
Order matters!

Routing to Features Checklist: Naming Routes
Use a common root path name for related feature routes
- products
- products/:id
- products/:id/edit

Routing to Features Checklist: Activate with Code
Import the Router
Add a dependency on the Router service
- As a constructor parameter
Use the Router service navigate method
Pass in a link parameters array
- First element is the root Url segment
- All other elements are route parameters or additional Url segments
this.router.navigate(['/welcome']);
this.router.navigateByUrl('/welcome');

Routing to Features Checklist: Routing Modules
Separate out routes to their own routing module
Keep route path order in mind

5. Route Parameters
##########################
When you click the link to change the current url from 
http://localhost:4200/products/5/edit
to 
http://localhost:4200/products/0/edit
To maximize performance and minimize changes to the browser's Document Object Model, or DOM, 
the router reuses a component and its template if only the parameters of the route changes.
If I then click on Add Product, only the route parameter changes, so the Product Edit component and its template are reused and 
not reinitialized. This feature of component reuse is important to understand as we reroute parameters.










